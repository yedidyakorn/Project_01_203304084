package geometries;

import primitives.*;

/**
 * Plane class represents a plane in 3D Cartesian coordinate system
 *
 * @author Yedidya Korn & Eliezer Horowitz
 */
public class Plane {

    /**
     * point represents a point on the plane
     * normal represents the normal vector to the plane
     */
    Point3D point;
    Vector normal;

    /**
     * plane ctor that gets three points
     */
    public Plane(Point3D a, Point3D b, Point3D c) {
        point = a;
        normal = null;
    }

    /**
     * plane ctor that gets a point and normal vector
     */
    public Plane(Point3D p, Vector vec) {
        point = p;
        normal = vec;
    }

    /**
     * getter for a point on the plane
     */
    public Point3D getPoint() {
        return point;
    }

    /**
     * getter for the normal vector of the plane
     */
    public Vector getNormal(Point3D p1, Point3D p2, Point3D p3) {
        Vector v1 = new Vector(p2.x-p1.x, p2.y-p1.y, p2.z-p1.z);
        Vector v2 = new Vector(p3.x-p1.x, p3.y-p1.y, p3.z-p1.z);

        Vector temp = v1.crossProduct(v2);

        return temp.normalized();
    }


    @Override
    public String toString() {
        return "Plane{" +
                "point=" + point +
                ", normal=" + normal +
                '}';
    }
}
